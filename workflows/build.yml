name: XIBRA Build Pipeline

on:
  push:
    branches: [ "main", "dev" ]
    paths:
      - 'core/**'
      - 'services/**'
      - 'Dockerfile'
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1
  GOPROXY: https://proxy.golang.org,direct

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            tags: latest
          - platform: linux/arm64
            tags: arm64v8
    services:
      redis:  # For integration tests
        image: redis:7-alpine
        ports: ["6379:6379"]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:master
          network=host

    - name: Cache Docker Layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Multi-Arch Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/xibra-node/Dockerfile
        platforms: ${{ matrix.platform }}
        outputs: type=docker
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          VERSION=${{ github.sha }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.tags }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        format: spdx-json
        output-file: sbom-${{ matrix.platform }}.json

    - name: Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.tags }}
        format: 'sarif'
        output: trivy-results-${{ matrix.platform }}.sarif
        severity: 'HIGH,CRITICAL'
        ignore-unfixed: true

    - name: Run Unit Tests
      run: |
        python -m pytest tests/unit/ --cov=core --cov-report=xml
        cargo test --manifest-path core/quantum_security/Cargo.toml --no-fail-fast
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ matrix.platform }}
        path: |
          *.xml
          sbom-*.json
          trivy-results-*.sarif

  push:
    name: Push to Registry
    needs: build
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Push to GHCR
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}

    - name: Upload SBOM
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results-*.sarif
